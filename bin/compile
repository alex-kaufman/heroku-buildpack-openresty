#!/bin/sh

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3


topic() {
  echo "-----> $*"
}

topic "Downlaoding package"
PKG="https://github.com/alex-kaufman/heroku-buildpack-openresty/releases/download/v1.13.6.1/openresty_build-1.13.6.1.tar.gz"

topic "Unpacking $PKG..."
curl -L $PKG | tar xzf - -C $BUILD_DIR


# APP_PREFIX=/app/.heroku
# mkdir -p $APP_PREFIX

# mkdir -p $CACHE_DIR


# # if [ -d "$CACHE_DIR/$APP_PREFIX" ]
# # then
# 	# topic "Restoring openresty build from cache..."
# 	# cp $CACHE_DIR/$APP_PREFIX $BUILD_DIR/
# # else
# 	PKG=http://openresty.org/download/openresty-1.13.6.1.tar.gz 

# 	topic "Downloading Openresty..."
# 	curl -O -L $PKG

# 	tar -xvf openresty-1.13.6.1.tar.gz 
# 	cd openresty-1.13.6.1
# 	export PATH=/sbin:$PATH

# 	topic "Configuring openresty...."
# 	./configure -j2  --with-pcre-jit --with-luajit --prefix=$APP_PREFIX
# 	make
# 	make install
# 	cd

# 	# topic "Caching directory..."
# 	# cp -R $APP_PREFIX $CACHE_DIR

# 	topic "Making Openresty available to running application...."
# 	mv $APP_PREFIX $BUILD_DIR/
# # fi

mkdir -p $BUILD_DIR/conf/env/vars
cp $ENV_DIR/* $BUILD_DIR/conf/env/vars

if [ ! -r $BUILD_DIR/Procfile ]; then
  if [ ! -r $BUILD_DIR/start.sh ]; then
    cat > $BUILD_DIR/start.sh <<'EOF'
#!/bin/sh
mkdir -p logs
touch logs/error.log
touch logs/access.log
echo "listen $PORT;" > conf/env/heroku-http-port
.heroku/nginx/sbin/nginx -p `pwd`/ -c conf/openresty.conf
EOF
    chmod +x $BUILD_DIR/start.sh
  fi
  topic '       No Procfile; using start.sh'
  echo 'web: ./start.sh' > $BUILD_DIR/Procfile
fi
